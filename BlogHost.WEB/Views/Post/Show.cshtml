@inject IPostService PostService
@inject IUserService UserService
@model PostViewModel
@{
    ViewData["Title"] = "Post details";
}
@section css {
    <link href="@Url.Content("~/css/single-post.css")" rel="stylesheet" />
}

<div id="cont">
    <div class="slider">
        @if (Model.ProfilePicture.Length <= 1)
        {
            <img src="~/images/default-blog-image.jpg" alt="Profile Image">
        }
        else
        {
            <img src="data:image/jpeg;base64,@(Convert.ToBase64String(Model.ProfilePicture))">
        }
        <>
    </div>


    <section class="post-area section">
        <div class="container">

            <div class="row">

                <div class="col-lg-8 col-md-12 no-right-padding">

                    <div class="main-post">

                        <div class="blog-post-inner">

                            <h3 class="title"><b>@Model.Title</b></h3>

                            <p class="para">@Model.Text</p>

                            <ul class="tags">
                                @foreach (PostTagViewModel postTag in Model.Tags)
                                {
                                    <li><a asp-controller="Post" asp-action="Search" asp-route-tags="@postTag.Tag.Name">@postTag.Tag.Name</a></li>
                                }
                            </ul>
                        </div><!-- blog-post-inner -->

                        <div class="post-icons-area">
                            <ul class="post-icons" style="font-size: 150%;">
                                <li>
                                    <a>
                                        <i type='submit' id="likeButton" class="ion-heart"></i>
                                        <acronym id="likesCountTop">@Model.Likes.Count()</acronym>
                                    </a>
                                    <input id="PostId" type="hidden" value="@Model.Id" />
                                    <input id="isLiked" name="isLiked" type="hidden" value="@PostService.IsLiked(Model.Id, User).ToString()" />
                                    <input id="isAuthenticated" name="isAuthenticated" type="hidden" value="@User.Identity.IsAuthenticated.ToString()" />
                                </li>
                                <li><a href="#comm"><i class="ion-chatbubble"></i><acronym id="commentsCountTop">@Model.Comments.Count()</acronym></a></li>
                            </ul>

                            <ul class="icons">
                                <li>POST ACTIONS : </li>
                                <li><a asp-controller="Blog" asp-action="Show" asp-route-id="@Model.Blog.Id" class="back-btn">Back to blog</a></li>
                                @if (User.Identity.IsAuthenticated && PostService.HasAccess(Model.Id, User))
                                {
                                    <li><a asp-controller="Post" asp-action="Edit" asp-route-id="@Model.Id" class="info-btn">Edit</a></li>
                                    <li>
                                        <form asp-controller="Post" asp-action="Delete" asp-route-id="@Model.Id" style='display: inline-block;' method='post'>
                                            <button type='submit' class='danger-btn' onclick="return confirm('Do you really want to delete this post?')">
                                                Delete
                                            </button>
                                        </form>
                                    </li>
                                }
                            </ul>
                        </div>

                        <div class="post-footer post-info">

                            <div class="left-area">
                                <a class="avatar" asp-controller="Blog" asp-action="Search" asp-route-author="@Model.Author.UserName">
                                    @{ var photo = UserService.GetProfilePicture(Model.Author.Id); }
                                    @if (photo == null)
                                    {
                                        <img src="~/images/default-user-image.png" alt="Profile Image">
                                    }
                                    else
                                    {
                                        <img src="data:image/jpeg;base64,@(Convert.ToBase64String(photo))" />
                                    }
                                </a>
                            </div>

                            <div class="middle-area">
                                <a class="name" href="#"><b>@Model.Author.UserName</b></a>
                                <h6 class="date"> on @Model.Created</h6>
                            </div>

                        </div><!-- post-info -->


                    </div><!-- main-post -->
                </div><!-- col-lg-8 col-md-12 -->

                <div class="col-lg-4 col-md-12 no-left-padding">

                    <div class="single-post info-area">

                        <div class="sidebar-area about-area">
                            <h4 class="title"><b>ABOUT BLOG</b></h4>
                            <p>@Model.Blog.Description</p>
                        </div>

                        @await Component.InvokeAsync("PopularTags")

                    </div><!-- info-area -->

                </div><!-- col-lg-4 col-md-12 -->

            </div><!-- row -->
            <div id="comm"></div>
        </div><!-- container -->
    </section><!-- post-area -->
    <script src="~/js/like.js"></script>
</div>

<section class="comment-section">
    <div class="container">

        <div class="row">

            <div class="col-lg-8 col-md-12">
                <div id="commentList">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <h4><b>POST COMMENT</b></h4>
                        <div class="comment-form">
                            <form asp-action="Add" asp-controller="Comment" asp-route-postId="@Model.Id" method="post">
                                <div class="row">
                                    <div class="col-sm-12">
                                        <textarea class="form-control" placeholder="Enter your comment" id="Text" name="Text" rows="5"></textarea>
                                    </div><!-- col-sm-12 -->
                                    <div class="col-sm-12">
                                        <button class="submit-btn" type="submit" id="addCommentButton"><b>POST COMMENT</b></button>
                                    </div><!-- col-sm-12 -->

                                </div><!-- row -->
                            </form>
                        </div><!-- comment-form -->
                    }
                    <h4>
                        <b>COMMENTS(<acronym id="commentCount">@Model.Comments.Count()</acronym>)</b>
                    </h4>


                    @foreach (CommentViewModel comment in Model.Comments)
                    {
                        <div class="commnets-area">
                            <div class="comment">

                                <div class="post-info">

                                    <div class="pull-left">
                                        <a class="name" href="#"><b>@comment.Author.UserName</b></a>
                                        <h6 class="date">on @comment.Created</h6>
                                    </div>

                                </div><!-- post-info -->

                                <p>@comment.Text</p>

                            </div>
                        </div><!-- commnets-area -->
                    }
                    <div id="lastComment"></div>

                    <script src="~/js/dateformat.js"></script>
                    <script src="~/js/comment.js"></script>
                </div>
            </div><!-- col-lg-8 col-md-12 -->

        </div><!-- row -->

    </div><!-- container -->
</section>
